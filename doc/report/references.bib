@inproceedings{Ko:2007,
  address = {Washington, DC, USA},
  series = {ICSE '07},
  title = {Information {{Needs}} in {{Collocated Software Development Teams}}},
  isbn = {978-0-7695-2828-1},
  doi = {10.1109/ICSE.2007.45},
  abstract = {Previous research has documented the fragmented nature of software development work. To explain this in more detail, we analyzed software developers' day-to-day information needs. We observed seventeen developers at a large software company and transcribed their activities in 90-minute sessions. We analyzed these logs for the information that developers sought, the sources that they used, and the situations that prevented information from being acquired. We identified twenty-one information types and cataloged the outcome and source when each type of information was sought. The most frequently sought information included awareness about artifacts and coworkers. The most often deferred searches included knowledge about design and program behavior, such as why code was written a particular way, what a program was supposed to do, and the cause of a program state. Developers often had to defer tasks because the only source of knowledge was unavailable coworkers.},
  urldate = {2018-01-24},
  booktitle = {Proceedings of the 29th {{International Conference}} on {{Software Engineering}}},
  publisher = {{IEEE Computer Society}},
  author = {Ko, Andrew J. and DeLine, Robert and Venolia, Gina},
  year = {2007},
  pages = {344--353}
}

@article{Ernst:2007,
  series = {Special issue on Experimental Software and Toolkits},
  title = {The {{Daikon}} System for Dynamic Detection of Likely Invariants},
  volume = {69},
  issn = {0167-6423},
  doi = {10.1016/j.scico.2007.01.015},
  abstract = {Daikon is an implementation of dynamic detection of likely invariants; that is, the Daikon invariant detector reports likely program invariants. An invariant is a property that holds at a certain point or points in a program; these are often used in assert statements, documentation, and formal specifications. Examples include being constant (x=a), non-zero (x$\not =$0), being in a range (a$\leq$x$\leq$b), linear relationships (y=ax+b), ordering (x$\leq$y), functions from a library (x=fn(y)), containment (x$\in$y), sortedness (xissorted), and many more. Users can extend Daikon to check for additional invariants. Dynamic invariant detection runs a program, observes the values that the program computes, and then reports properties that were true over the observed executions. Dynamic invariant detection is a machine learning technique that can be applied to arbitrary data. Daikon can detect invariants in C, C++, Java, and Perl programs, and in record-structured data sources; it is easy to extend Daikon to other applications. Invariants can be useful in program understanding and a host of other applications. Daikon's output has been used for generating test cases, predicting incompatibilities in component integration, automating theorem proving, repairing inconsistent data structures, and checking the validity of data streams, among other tasks. Daikon is freely available in source and binary form, along with extensive documentation, at http://pag.csail.mit.edu/daikon/.},
  number = {1},
  urldate = {2018-02-03},
  journal = {Science of Computer Programming},
  author = {Ernst, Michael D. and Perkins, Jeff H. and Guo, Philip J. and McCamant, Stephen and Pacheco, Carlos and Tschantz, Matthew S. and Xiao, Chen},
  month = dec,
  year = {2007},
  keywords = {Daikon,Dynamic analysis,Dynamic invariant detection,Inductive logic programming,Inference,Invariant,Likely invariant,Program understanding,Specification,Specification mining},
  pages = {35--45}
}

@misc{Renshaw:2018,
  title = {Seer: Symbolic Execution Engine for {{Rust}}},
  shorttitle = {Seer},
  urldate = {2018-02-03},
  url = {https://github.com/dwrensha/seer},
  author = {Renshaw, David},
  month = jan,
  year = {2018}
}

@misc{bluss:2018,
  title = {Rust-Itertools: {{Extra}} Iterator Adaptors, Iterator Methods, Free Functions, and Macros},
  copyright = {Apache-2.0},
  shorttitle = {Rust-Itertools},
  url = {https://docs.rs/itertools/0.7.6/itertools/#functions},
  urldate = {2018-02-03},
  author = {{bluss}},
  month = feb,
  year = {2018},
  keywords = {iterators,rust}
}

@misc{NeovimTeam:2018,
  title = {Neovim: {{Vim}}-Fork Focused on Extensibility and Usability},
  shorttitle = {Neovim},
  url = {https://github.com/neovim/neovim},
  urldate = {2018-02-03},
  publisher = {{Neovim}},
  author = {Neovim Team},
  month = feb,
  year = {2018},
  keywords = {api,c,cross-platform,extensible,lua,neovim,nvim,text-editor,vim}
}

@misc{SEDocOverview,
author={M. Visconti and C. R. Cook},
booktitle={12th International Conference of the Chilean Computer Science Society, 2002. Proceedings.},
title={An overview of industrial software documentation practice},
year={2002},
volume={},
number={},
pages={179-186},
keywords={DP industry;software development management;software process improvement;system documentation;assessment;assessment procedure;degree of satisfaction;documentation;key practices;maturity model;process maturity model;software industry;system documentation;system documentation processes;Capability maturity model;Character generation;Computer industry;Documentation;Feedback;Government;Programming;Software maintenance;Software quality;Software testing},
doi={10.1109/SCCC.2002.1173192},
ISSN={1522-4902},
month={},}

@misc{Halvorsen:2018,
  title = {Software Documentation},
  url = {http://home.hit.no/~hansha/documents/software/software_development/topics/resources/Software%20Documentation%20Overview.pdf},
  urldate = {2018-02-03},
  author = {{Hans Halvorsen}},
  month = april,
  year = {2018},
  keywords = {documentation, software}
}

@ARTICLE{Uddin:2015,
author={G. Uddin and M. P. Robillard},
journal={IEEE Software},
title={How API Documentation Fails},
year={2015},
volume={32},
number={4},
pages={68-75},
keywords={application program interfaces;learning (artificial intelligence);software engineering;system documentation;API documentation unit;crucial resource;formal documentation;learning;Application programming interfaces;Databases;Documentation;Software development;Standards;Uniform resource locators;API;documentation;software development;software engineering;user study},
doi={10.1109/MS.2014.80},
ISSN={0740-7459},
month={July},}

@inproceedings{Stettina:2011,
 author = {Stettina, Christoph Johann and Heijstek, Werner},
 title = {Necessary and Neglected?: An Empirical Study of Internal Documentation in Agile Software Development Teams},
 booktitle = {Proceedings of the 29th ACM International Conference on Design of Communication},
 series = {SIGDOC '11},
 year = {2011},
 isbn = {978-1-4503-0936-3},
 location = {Pisa, Italy},
 pages = {159--166},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/2038476.2038509},
 doi = {10.1145/2038476.2038509},
 acmid = {2038509},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {agile software development, documentation, empirical study},
} 

@inproceedings{Forward:2002,
 author = {Forward, Andrew and Lethbridge, Timothy C.},
 title = {The Relevance of Software Documentation, Tools and Technologies: A Survey},
 booktitle = {Proceedings of the 2002 ACM Symposium on Document Engineering},
 series = {DocEng '02},
 year = {2002},
 isbn = {1-58113-594-7},
 location = {McLean, Virginia, USA},
 pages = {26--33},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/585058.585065},
 doi = {10.1145/585058.585065},
 acmid = {585065},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {documentation relevance, documentation survey, documentation technologies, program comprehension, software documentation, software engineering, software maintenance},
}

@book{kull_2015, place={New York}, title={Mass customization: opportunities, methods, and challenges for manufacturers}, publisher={Apress}, author={Kull, Hans}, year={2015}} 

@article{Robillard:2011,
 author = {Robillard, Martin P. and Deline, Robert},
 title = {A Field Study of API Learning Obstacles},
 journal = {Empirical Softw. Engg.},
 issue_date = {December  2011},
 volume = {16},
 number = {6},
 month = dec,
 year = {2011},
 issn = {1382-3256},
 pages = {703--732},
 numpages = {30},
 url = {http://dx.doi.org/10.1007/s10664-010-9150-8},
 doi = {10.1007/s10664-010-9150-8},
 acmid = {2036677},
 publisher = {Kluwer Academic Publishers},
 address = {Hingham, MA, USA},
 keywords = {Application programming interfaces, Documentation, Programming, Software libraries},
} 

@ARTICLE{Lethbridge:2003,
author={T. C. Lethbridge and J. Singer and A. Forward},
journal={IEEE Software},
title={How software engineers use documentation: the state of the practice},
year={2003},
volume={20},
number={6},
pages={35-39},
keywords={software engineering;system documentation;decision making;documentation update;documentation use;software engineering;software engineers;software process managers;software process personnel;tool design;Data engineering;Documentation;Humans;Maintenance engineering;Power engineering and energy;Software engineering;Software maintenance;Software systems;Software testing;System testing},
doi={10.1109/MS.2003.1241364},
ISSN={0740-7459},
month={Nov},}

@article{Ball:1999,
 author = {Ball, Thoms},
 title = {The Concept of Dynamic Analysis},
 journal = {SIGSOFT Softw. Eng. Notes},
 issue_date = {Nov. 1999},
 volume = {24},
 number = {6},
 month = oct,
 year = {1999},
 issn = {0163-5948},
 pages = {216--234},
 numpages = {19},
 url = {http://doi.acm.org/10.1145/318774.318944},
 doi = {10.1145/318774.318944},
 acmid = {318944},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@misc{Atom,
  title = {Atom},
  shorttitle = {Atom},
  url = {https://atom.io},
  urldate = {2018-03-25},
  author = {GitHub},
  month = mar,
  year = {2018},
  keywords = {github,editors}
}

@inproceedings{McBurney:2014:ADG:2597008.2597149,
 author = {McBurney, Paul W. and McMillan, Collin},
 title = {Automatic Documentation Generation via Source Code Summarization of Method Context},
 booktitle = {Proceedings of the 22Nd International Conference on Program Comprehension},
 series = {ICPC 2014},
 year = {2014},
 isbn = {978-1-4503-2879-1},
 location = {Hyderabad, India},
 pages = {279--290},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2597008.2597149},
 doi = {10.1145/2597008.2597149},
 acmid = {2597149},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Source code summarization},
} 

@inproceedings{Buse:2008:ADI:1390630.1390664,
 author = {Buse, Raymond P.L. and Weimer, Westley R.},
 title = {Automatic Documentation Inference for Exceptions},
 booktitle = {Proceedings of the 2008 International Symposium on Software Testing and Analysis},
 series = {ISSTA '08},
 year = {2008},
 isbn = {978-1-60558-050-0},
 location = {Seattle, WA, USA},
 pages = {273--282},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1390630.1390664},
 doi = {10.1145/1390630.1390664},
 acmid = {1390664},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {documentation inference, exception handling, software documentation},
} 

@INPROCEEDINGS{Kim:2009,
author={J. Kim and S. Lee and S. w. Hwang and S. Kim},
booktitle={2009 IEEE/ACM International Conference on Automated Software Engineering},
title={Adding Examples into Java Documents},
year={2009},
volume={},
number={},
pages={540-544},
keywords={Java;application program interfaces;document handling;API documents;JDK 5 documents;Java documents;JavaDocs 5;application programming interfaces;Application software;Automatic programming;Data mining;Feature extraction;Humans;Java;Libraries;Productivity;Search engines;Software engineering;API Documents;Code Clustering;Examples;Ranking;Structures},
doi={10.1109/ASE.2009.39},
ISSN={1938-4300},
month={Nov},}

@inproceedings{Long:2009,
 author = {Long, Fan and Wang, Xi and Cai, Yang},
 title = {Api Hyperlinking via Structural Overlap},
 booktitle = {Proceedings of the the 7th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
 series = {ESEC/FSE '09},
 year = {2009},
 isbn = {978-1-60558-001-2},
 location = {Amsterdam, The Netherlands},
 pages = {203--212},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1595696.1595727},
 doi = {10.1145/1595696.1595727},
 acmid = {1595727},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {api recommendation, module clustering, overlap rank},
} 

@INPROCEEDINGS{Montandon:2013,
author={J. E. Montandon and H. Borges and D. Felix and M. T. Valente},
booktitle={2013 20th Working Conference on Reverse Engineering (WCRE)},
title={Documenting APIs with examples: Lessons learned with the APIMiner platform},
year={2013},
volume={},
number={},
pages={401-408},
keywords={Java;application program interfaces;data mining;software engineering;system documentation;API documentation;API learning process;APIMiner platform;Android API;application programming interfaces;private source code repository;software development;standard Java-based API documentation format;static slicing algorithm;Androids;Computer architecture;Documentation;Google;Humanoid robots;Instruments;Measurement;API documentation;JavaDoc;field study;source code examples},
doi={10.1109/WCRE.2013.6671315},
ISSN={1095-1350},
month={Oct},}

@inproceedings{Sridhara:2011,
 author = {Sridhara, Giriprasad and Pollock, Lori and Vijay-Shanker, K.},
 title = {Automatically Detecting and Describing High Level Actions Within Methods},
 booktitle = {Proceedings of the 33rd International Conference on Software Engineering},
 series = {ICSE '11},
 year = {2011},
 isbn = {978-1-4503-0445-0},
 location = {Waikiki, Honolulu, HI, USA},
 pages = {101--110},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1985793.1985808},
 doi = {10.1145/1985793.1985808},
 acmid = {1985808},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {documentation, program comprehension},
} 

@Article{Sulir:2017,
AUTHOR = {Sulír, Matúš and Porubän, Jaroslav},
TITLE = {Source Code Documentation Generation Using Program Execution},
JOURNAL = {Information},
VOLUME = {8},
YEAR = {2017},
NUMBER = {4},
URL = {http://www.mdpi.com/2078-2489/8/4/148},
ISSN = {2078-2489},
ABSTRACT = {Automated source code documentation approaches often describe methods in abstract terms, using the words contained in the static source code or code excerpts from repositories. In this paper, we describe DynamiDoc: a simple automated documentation generator based on dynamic analysis. Our representation-based approach traces the program being executed and records string representations of concrete argument values, a return value and a target object state before and after each method execution. Then, for each method, it generates documentation sentences with examples, such as “When called on [3, 1.2] with element = 3, the object changed to [1.2]”. Advantages and shortcomings of the approach are listed. We also found out that the generated sentences are substantially shorter than the methods they describe. According to our small-scale study, the majority of objects in the generated documentation have their string representations overridden, which further confirms the potential usefulness of our approach. Finally, we propose an alternative, variable-based approach that describes the values of individual member variables, rather than the state of an object as a whole.},
DOI = {10.3390/info8040148}
}

@INPROCEEDINGS{Tan:2012,
author={S. H. Tan and D. Marinov and L. Tan and G. T. Leavens},
booktitle={2012 IEEE Fifth International Conference on Software Testing, Verification and Validation},
title={@tComment: Testing Javadoc Comments to Detect Comment-Code Inconsistencies},
year={2012},
volume={},
number={},
pages={260-269},
keywords={Java;application program interfaces;formal specification;natural language processing;program testing;text analysis;@TCOMMENT;API specification;English text analysis;Javadoc comment testing;comment-code inconsistency detection;software artifact;Arrays;Contracts;Educational institutions;Java;Libraries;Synchronization;Testing;comment analysis;random testing;test generation},
doi={10.1109/ICST.2012.106},
ISSN={2159-4848},
month={April},}

@inproceedings{Lo:2010,
 author = {Lo, David and Maoz, Shahar},
 title = {Scenario-based and Value-based Specification Mining: Better Together},
 booktitle = {Proceedings of the IEEE/ACM International Conference on Automated Software Engineering},
 series = {ASE '10},
 year = {2010},
 isbn = {978-1-4503-0116-9},
 location = {Antwerp, Belgium},
 pages = {387--396},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1858996.1859081},
 doi = {10.1145/1858996.1859081},
 acmid = {1859081},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {dynamic analysis, live sequence charts, specification mining, value-based invariants},
} 

@inproceedings{Lefebvre:2012,
 author = {Lefebvre, Geoffrey and Cully, Brendan and Head, Christopher and Spear, Mark and Hutchinson, Norm and Feeley, Mike and Warfield, Andrew},
 title = {Execution Mining},
 booktitle = {Proceedings of the 8th ACM SIGPLAN/SIGOPS Conference on Virtual Execution Environments},
 series = {VEE '12},
 year = {2012},
 isbn = {978-1-4503-1176-2},
 location = {London, England, UK},
 pages = {145--158},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/2151024.2151044},
 doi = {10.1145/2151024.2151044},
 acmid = {2151044},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {binary analysis, offline analysis, semantic gap, virtual machine},
} 

@inproceedings{tacas2016-ldghikrr,
  author = {Kasper Luckow and Marko Dimja\v{s}evi\'c and Dimitra Giannakopoulou and Falk Howar
    and Malte Isberner and Temesghen Kahsai and Zvonimir Rakamari\'c and Vishwanath Raman},
  title = {{JDart}: A Dynamic Symbolic Analysis Framework},
  booktitle = {Proceedings of the 22nd International Conference on Tools and Algorithms
    for the Construction and Analysis of Systems (TACAS)},
  series = {Lecture Notes in Computer Science},
  volume = {9636},
  publisher = {Springer},
  editor = {Marsha Chechik and Jean-Fran{\c{c}}ois Raskin},
  year = {2016},
  pages = {442--459},
}

@inproceedings{SaiZhang:2011,
 author = {Sai Zhang and Cheng Zhang and Ernst, Michael D.},
 title = {Automated Documentation Inference to Explain Failed Tests},
 booktitle = {Proceedings of the 2011 26th IEEE/ACM International Conference on Automated Software Engineering},
 series = {ASE '11},
 year = {2011},
 isbn = {978-1-4577-1638-6},
 pages = {63--72},
 numpages = {10},
 url = {http://dx.doi.org/10.1109/ASE.2011.6100145},
 doi = {10.1109/ASE.2011.6100145},
 acmid = {2190153},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
} 

@inproceedings{Johnson:2013:WDS:2486788.2486877,
 author = {Johnson, Brittany and Song, Yoonki and Murphy-Hill, Emerson and Bowdidge, Robert},
 title = {Why Don\&\#039;T Software Developers Use Static Analysis Tools to Find Bugs?},
 booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
 series = {ICSE '13},
 year = {2013},
 isbn = {978-1-4673-3076-3},
 location = {San Francisco, CA, USA},
 pages = {672--681},
 numpages = {10},
 url = {http://dl.acm.org/citation.cfm?id=2486788.2486877},
 acmid = {2486877},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
} 

@inproceedings{Johnson:2013,
 author = {Johnson, Brittany and Song, Yoonki and Murphy-Hill, Emerson and Bowdidge, Robert},
 title = {Why Don\&\#039;T Software Developers Use Static Analysis Tools to Find Bugs?},
 booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
 series = {ICSE '13},
 year = {2013},
 isbn = {978-1-4673-3076-3},
 location = {San Francisco, CA, USA},
 pages = {672--681},
 numpages = {10},
 url = {http://dl.acm.org/citation.cfm?id=2486788.2486877},
 acmid = {2486877},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
} 

@misc{junit:2018,
  title = {JUnit 5},
  shorttitle = {JUnit},
  url = {https://junit.org/},
  urldate = {2018-03-25},
  author = {JUnit team},
  month = mar,
  year = {2018},
  keywords = {testing,java}
}

@misc{guava:2018,
  title = {Guava - opensource.google.com},
  shorttitle = {Guava},
  url = {https://opensource.google.com/projects/guava},
  urldate = {2018-03-25},
  author = {Google},
  month = mar,
  year = {2018},
  keywords = {google,java}
}